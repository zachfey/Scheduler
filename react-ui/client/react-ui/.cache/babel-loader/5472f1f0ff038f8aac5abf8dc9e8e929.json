{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sessionReducer = exports.sessionService = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _constants = require('./constants');\n\nvar _jsCookie = require('js-cookie');\n\nvar Cookies = _interopRequireWildcard(_jsCookie);\n\nvar _isPromise = require('is-promise');\n\nvar _isPromise2 = _interopRequireDefault(_isPromise);\n\nvar _actions = require('./actions');\n\nvar _reducer = require('./reducer');\n\nvar _reducer2 = _interopRequireDefault(_reducer);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar instance = void 0;\n\nvar sessionService = exports.sessionService = function () {\n  function sessionService(store, options) {\n    _classCallCheck(this, sessionService);\n\n    instance = this;\n    sessionService.setOptions(store, options);\n    return instance;\n  }\n\n  _createClass(sessionService, null, [{\n    key: 'setOptions',\n    value: function setOptions(store) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          driver = _ref.driver,\n          validateSession = _ref.validateSession,\n          _ref$refreshOnCheckAu = _ref.refreshOnCheckAuth,\n          refreshOnCheckAuth = _ref$refreshOnCheckAu === undefined ? false : _ref$refreshOnCheckAu,\n          _ref$expires = _ref.expires,\n          expires = _ref$expires === undefined ? 360 : _ref$expires,\n          _ref$redirectPath = _ref.redirectPath,\n          redirectPath = _ref$redirectPath === undefined ? 'login' : _ref$redirectPath,\n          _ref$server = _ref.server,\n          server = _ref$server === undefined ? false : _ref$server;\n\n      instance.store = store;\n      instance.refreshOnCheckAuth = refreshOnCheckAuth;\n      instance.redirectPath = redirectPath;\n      instance.expires = expires;\n      instance.driver = driver;\n      instance.server = server;\n      instance.validateSession = validateSession; // configure the storage\n\n      var storageOptions = {\n        name: 'redux-react-session'\n      };\n\n      var localforage = require('localforage');\n\n      if (driver && driver !== 'COOKIES') {\n        storageOptions.driver = localforage[driver];\n      }\n\n      instance.storage = localforage.createInstance(storageOptions);\n    }\n  }, {\n    key: 'initSessionService',\n    value: function initSessionService(store, options) {\n      instance = new sessionService(store, options);\n      return sessionService.refreshFromLocalStorage();\n    }\n  }, {\n    key: 'initServerSession',\n    value: function initServerSession(store, req, options) {\n      instance = new sessionService(store, _extends({}, options, {\n        server: true\n      }));\n\n      var parseCookies = function parseCookies(req) {\n        var list = {};\n        var rc = req.get('cookie');\n        rc && rc.split(';').forEach(function (cookie) {\n          var parts = cookie.split('=');\n\n          if (parts[0].trim() === _constants.USER_SESSION || parts[0].trim() === _constants.USER_DATA) {\n            list[parts[0].trim()] = JSON.parse(decodeURIComponent(parts[1]));\n          }\n        });\n        return list;\n      };\n\n      return sessionService.saveFromClient(parseCookies(req));\n    }\n  }, {\n    key: 'saveFromClient',\n    value: function saveFromClient(cookies) {\n      return new Promise(function (resolve, reject) {\n        if (cookies[_constants.USER_SESSION]) {\n          sessionService.saveSession(cookies[_constants.USER_SESSION]).then(function () {\n            if (cookies[_constants.USER_DATA]) {\n              sessionService.saveUser(cookies[_constants.USER_DATA]).then(function () {\n                return resolve();\n              });\n            }\n          });\n        } else {\n          instance.store.dispatch((0, _actions.getSessionError)());\n          reject('Session not found');\n        }\n      });\n    }\n  }, {\n    key: 'invalidateSession',\n    value: function invalidateSession() {\n      instance.store.dispatch((0, _actions.invalidSession)());\n      sessionService.deleteSession();\n      sessionService.deleteUser();\n    }\n  }, {\n    key: 'attemptLoadUser',\n    value: function attemptLoadUser() {\n      instance.store.dispatch((0, _actions.getSessionSuccess)());\n      return sessionService.loadUser().then(function (user) {\n        instance.store.dispatch((0, _actions.getUserSessionSuccess)(user));\n      }).catch(function () {\n        instance.store.dispatch((0, _actions.getUserSessionError)());\n      });\n    }\n  }, {\n    key: 'refreshFromLocalStorage',\n    value: function refreshFromLocalStorage() {\n      var _this = this;\n\n      return sessionService.loadSession().then(function (session) {\n        if (instance.validateSession) {\n          var value = instance.validateSession(session);\n\n          if ((0, _isPromise2.default)(value)) {\n            return value.then(function (valid) {\n              if (!valid) {\n                throw new Error(\"Session is invalid\");\n              }\n\n              return _this.attemptLoadUser();\n            }).catch(function () {\n              _this.invalidateSession();\n            });\n          } else if (!value) {\n            _this.invalidateSession();\n\n            return;\n          }\n        }\n\n        return _this.attemptLoadUser();\n      }).catch(function () {\n        instance.store.dispatch((0, _actions.getSessionError)());\n      });\n    }\n  }, {\n    key: 'checkAuth',\n    value: function checkAuth(nextState, replace, next) {\n      var _instance = instance,\n          refreshOnCheckAuth = _instance.refreshOnCheckAuth,\n          store = _instance.store;\n      sessionService.loadSession().then(function () {\n        refreshOnCheckAuth && store.dispatch((0, _actions.getSessionSuccess)());\n        sessionService.loadUser().then(function (user) {\n          refreshOnCheckAuth && store.dispatch((0, _actions.getUserSessionSuccess)(user));\n          next();\n        }).catch(function () {\n          return next();\n        });\n      }).catch(function () {\n        refreshOnCheckAuth && store.dispatch((0, _actions.getSessionError)());\n        refreshOnCheckAuth && store.dispatch((0, _actions.getUserSessionError)());\n        replace({\n          pathname: instance.redirectPath,\n          state: {\n            nextPathname: nextState.location.pathname\n          }\n        });\n        next();\n      });\n    }\n  }, {\n    key: 'saveSession',\n    value: function saveSession(session) {\n      return new Promise(function (resolve) {\n        if (instance.server) {\n          instance[_constants.USER_SESSION] = session;\n          instance.store.dispatch((0, _actions.getSessionSuccess)());\n          resolve();\n        } else if (instance.driver === 'COOKIES') {\n          Cookies.set(_constants.USER_SESSION, session, {\n            expires: instance.expires\n          });\n          instance.store.dispatch((0, _actions.getSessionSuccess)());\n          resolve();\n        } else {\n          instance.storage.setItem(_constants.USER_SESSION, session).then(function () {\n            instance.store.dispatch((0, _actions.getSessionSuccess)());\n            resolve();\n          }).catch(function () {\n            Cookies.set(_constants.USER_SESSION, session, {\n              expires: instance.expires\n            });\n            instance.store.dispatch((0, _actions.getSessionSuccess)());\n            resolve();\n          });\n        }\n      });\n    }\n  }, {\n    key: 'loadSession',\n    value: function loadSession() {\n      return new Promise(function (resolve, reject) {\n        if (instance.server) {\n          instance[_constants.USER_SESSION] ? resolve(instance[_constants.USER_SESSION]) : reject();\n        } else if (instance.driver === 'COOKIES') {\n          var cookies = Cookies.getJSON(_constants.USER_SESSION);\n          cookies ? resolve(cookies) : reject('Session not found');\n        } else {\n          instance.storage.getItem(_constants.USER_SESSION).then(function (currentSession) {\n            if (currentSession) {\n              resolve(currentSession);\n            } else {\n              var _cookies = Cookies.getJSON(_constants.USER_SESSION);\n\n              _cookies ? resolve(_cookies) : reject('Session not found');\n            }\n          }).catch(function (err) {\n            return reject(err);\n          });\n        }\n      });\n    }\n  }, {\n    key: 'deleteSession',\n    value: function deleteSession() {\n      return instance.storage.removeItem(_constants.USER_SESSION).then(function () {\n        instance.store.dispatch((0, _actions.getSessionError)());\n        Cookies.remove(_constants.USER_SESSION);\n        delete instance[_constants.USER_SESSION];\n      });\n    }\n  }, {\n    key: 'saveUser',\n    value: function saveUser(user) {\n      return new Promise(function (resolve) {\n        if (instance.server) {\n          instance[_constants.USER_DATA] = user;\n          instance.store.dispatch((0, _actions.getUserSessionSuccess)(user));\n          resolve();\n        } else if (instance.driver === 'COOKIES') {\n          Cookies.set(_constants.USER_DATA, user, {\n            expires: instance.expires\n          });\n          instance.store.dispatch((0, _actions.getUserSessionSuccess)(user));\n          resolve();\n        } else {\n          instance.storage.setItem(_constants.USER_DATA, user).then(function (user) {\n            instance.store.dispatch((0, _actions.getUserSessionSuccess)(user));\n            resolve();\n          }).catch(function () {\n            instance.store.dispatch((0, _actions.getUserSessionSuccess)(user));\n            Cookies.set(_constants.USER_DATA, user, {\n              expires: instance.expires\n            });\n            resolve();\n          });\n        }\n      });\n    }\n  }, {\n    key: 'loadUser',\n    value: function loadUser() {\n      return new Promise(function (resolve, reject) {\n        if (instance.server) {\n          instance[_constants.USER_DATA] ? resolve(instance[_constants.USER_DATA]) : reject();\n        } else if (instance.driver === 'COOKIES') {\n          var cookies = Cookies.getJSON(_constants.USER_DATA);\n          cookies ? resolve(cookies) : reject('User not found');\n        } else {\n          instance.storage.getItem(_constants.USER_DATA).then(function (currentUser) {\n            if (currentUser) {\n              resolve(currentUser);\n            } else {\n              var _cookies2 = Cookies.getJSON(_constants.USER_DATA);\n\n              _cookies2 ? resolve(_cookies2) : reject('User not found');\n            }\n          }).catch(function (err) {\n            return reject(err);\n          });\n        }\n      });\n    }\n  }, {\n    key: 'deleteUser',\n    value: function deleteUser() {\n      return instance.storage.removeItem(_constants.USER_DATA).then(function () {\n        instance.store.dispatch((0, _actions.getUserSessionError)());\n        Cookies.remove(_constants.USER_DATA);\n        delete instance[_constants.USER_DATA];\n      });\n    }\n  }]);\n\n  return sessionService;\n}();\n\nvar sessionReducer = exports.sessionReducer = _reducer2.default;","map":null,"metadata":{},"sourceType":"script"}