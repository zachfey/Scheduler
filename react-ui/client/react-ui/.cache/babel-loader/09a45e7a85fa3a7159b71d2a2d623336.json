{"ast":null,"code":"import _defineProperty from \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\src\\\\components\\\\WeekSchedule\\\\weekSchedule.js\";\nimport React, { Component } from \"react\";\nimport Row from '../Row';\nimport { Table } from 'react-bootstrap';\nimport API from '../../utils/API';\n\nvar moment = require('moment');\n\nvar dayArray = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\nvar WeekSchedule =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WeekSchedule, _Component);\n\n  function WeekSchedule(props) {\n    var _this;\n\n    _classCallCheck(this, WeekSchedule);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WeekSchedule).call(this, props));\n    _this.state = {\n      //TODO change this from state to database query\n      weekSchedule: _this.props.week || {}\n    };\n    _this.updateSchedule = _this.updateSchedule.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleArrayChange = _this.handleArrayChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(WeekSchedule, [{\n    key: \"populateDates\",\n    value: function populateDates(week, year) {\n      //returns an array with each date of the given week (e.g. 1-Jul, 2-Jul, 3-Jul, etc.)\n      var date = moment(week + ' ' + year, \"w-YYYY\").format('D-MMM');\n      var dateArray = [];\n\n      for (var i = 1; i < 8; i++) {\n        dateArray.push(moment(date).add(i, 'day').format('D-MMM'));\n      }\n\n      return dateArray;\n    }\n  }, {\n    key: \"updateSchedule\",\n    value: function updateSchedule() {\n      API.updateWeek(this.state.weekSchedule);\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(rowIndex, category, name, value, dayIndex) {\n      // const {name, value} = event.target\n      var weekSched = this.state.weekSchedule;\n      var row = weekSched.rows[rowIndex];\n\n      if (dayIndex) {\n        console.log('dayindex exists!');\n        var _day = row.days[dayIndex];\n      }\n\n      switch (category) {\n        case 'type':\n          switch (name) {\n            case 'time':\n              console.log('current time: ' + row.time);\n              console.log('new time: ' + value);\n              break;\n\n            case 'type':\n              console.log('current type: ' + row.type);\n              console.log('new type: ' + value);\n          }\n\n          break;\n\n        case 'detail':\n          console.log('current numGuests: ' + day.numGuests);\n          console.log('new numGuests: ' + value);\n      } // console.log(this.state.row[])\n      // this.setState({ [id]: value })\n\n    }\n  }, {\n    key: \"handleArrayChange\",\n    value: function handleArrayChange(id, name, value) {\n      //TODO add ability to add row\n      // const {name, value} = event.target\n      // const index = parseInt(name)\n      // const newGuides = this.state.guides.map((guide, i) => {\n      //     return(i === index ? value : guide)\n      // });\n      this.setState(_defineProperty({}, id, value));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // console.log(this.state.week.rows)\n      return React.createElement(Table, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.updateSchedule,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Click me\")), dayArray.map(function (day) {\n        return React.createElement(\"th\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, day);\n      })), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), this.populateDates(this.state.weekSchedule.week, this.state.weekSchedule.year).map(function (date) {\n        return React.createElement(\"th\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, date);\n      }))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, this.state.weekSchedule.rows.map(function (row, index) {\n        return React.createElement(Row, {\n          key: row,\n          rowIndex: index,\n          row: row,\n          handleArrayChange: _this2.handleArrayChange,\n          handleChange: _this2.handleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        });\n      }), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return WeekSchedule;\n}(Component);\n\nexport default WeekSchedule;","map":{"version":3,"sources":["c:\\Users\\Zach\\bc\\00-Homework\\Scheduler\\client\\src\\components\\WeekSchedule\\weekSchedule.js"],"names":["React","Component","Row","Table","API","moment","require","dayArray","WeekSchedule","props","state","weekSchedule","week","updateSchedule","bind","handleChange","handleArrayChange","year","date","format","dateArray","i","push","add","updateWeek","rowIndex","category","name","value","dayIndex","weekSched","row","rows","console","log","day","days","time","type","numGuests","id","setState","map","populateDates","index"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Row from '../Row';\nimport {Table} from 'react-bootstrap';\nimport API from '../../utils/API'\nconst moment = require('moment')\n\nconst dayArray = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n\nclass WeekSchedule extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { //TODO change this from state to database query\n            weekSchedule: this.props.week || {}\n        }\n        this.updateSchedule = this.updateSchedule.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleArrayChange = this.handleArrayChange.bind(this);\n    }\n\n\n    populateDates(week, year) { //returns an array with each date of the given week (e.g. 1-Jul, 2-Jul, 3-Jul, etc.)\n        const date = moment(week + ' ' + year, \"w-YYYY\").format('D-MMM')\n        let dateArray = []\n        for (let i = 1; i < 8; i++) {\n            dateArray.push(moment(date).add(i, 'day').format('D-MMM'))\n        }\n        return dateArray\n    }\n\n    updateSchedule(){\n        API.updateWeek(this.state.weekSchedule)\n    }\n\n    handleChange(rowIndex, category, name, value, dayIndex) {\n        // const {name, value} = event.target\n        const weekSched = this.state.weekSchedule;\n        const row = weekSched.rows[rowIndex];\n        if(dayIndex) {\n            console.log('dayindex exists!')\n            const day = row.days[dayIndex]\n        }\n        switch (category){\n            case 'type':\n                switch(name){\n                    case 'time':\n                        console.log('current time: ' + row.time)\n                        console.log('new time: ' + value)\n                        break;\n                    case 'type':\n                        console.log('current type: ' + row.type)\n                        console.log('new type: ' + value)\n                }\n                break;\n            case 'detail':\n                console.log('current numGuests: ' + day.numGuests)\n                console.log('new numGuests: ' + value)\n\n        }\n        // console.log(this.state.row[])\n        // this.setState({ [id]: value })\n    }\n\n    handleArrayChange(id, name, value) { //TODO add ability to add row\n        // const {name, value} = event.target\n        // const index = parseInt(name)\n        // const newGuides = this.state.guides.map((guide, i) => {\n        //     return(i === index ? value : guide)\n        // });\n        this.setState({ [id]: value })\n    }\n\n    render() {\n        // console.log(this.state.week.rows)\n        return (\n            <Table striped bordered hover>\n            \n                <thead>\n                    <tr>\n                        <th><button onClick = {this.updateSchedule}>Click me</button></th>\n                        {dayArray.map(day => <th>{day}</th>)}\n                    </tr>\n                    <tr>\n                        <th></th>\n                        {this.populateDates(this.state.weekSchedule.week, this.state.weekSchedule.year).map(date => <th>{date}</th>)}\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.state.weekSchedule.rows.map((row, index) => {\n                        return (\n                            <Row\n                                key = {row}\n                                rowIndex = {index}\n                                row={row}\n                                handleArrayChange={this.handleArrayChange}\n                                handleChange={this.handleChange}\n                            />\n                        )\n                    })}\n                    <tr>\n\n                    </tr>\n                </tbody>\n            </Table >\n        )\n    }\n\n}\n\nexport default WeekSchedule;\n"]},"metadata":{},"sourceType":"module"}