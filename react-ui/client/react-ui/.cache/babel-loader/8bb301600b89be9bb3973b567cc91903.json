{"ast":null,"code":"import _classCallCheck from \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\src\\\\components\\\\WeekSchedule\\\\weekSchedule.js\";\nimport React, { Component } from \"react\";\nimport Row from '../Row';\nimport { Table } from 'react-bootstrap';\nimport API from '../../utils/API';\n\nvar moment = require('moment');\n\nvar dayArray = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\nvar WeekSchedule =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WeekSchedule, _Component);\n\n  function WeekSchedule(props) {\n    var _this;\n\n    _classCallCheck(this, WeekSchedule);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WeekSchedule).call(this, props));\n    _this.state = {\n      //TODO change this from state to database query\n      weekSchedule: _this.props.week || {} // this.updateSchedule = this.updateSchedule.bind(this);\n\n    };\n    _this.saveChanges = _this.saveChanges.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(WeekSchedule, [{\n    key: \"populateDates\",\n    value: function populateDates(week, year) {\n      //returns an array with each date of the given week (e.g. 1-Jul, 2-Jul, 3-Jul, etc.)\n      var date = moment(week + ' ' + year, \"w-YYYY\").format('D-MMM');\n      var dateArray = [];\n\n      for (var i = 1; i < 8; i++) {\n        dateArray.push(moment(date).add(i, 'day').format('D-MMM'));\n      }\n\n      return dateArray;\n    }\n  }, {\n    key: \"saveChanges\",\n    value: function saveChanges(state, cb) {\n      // console.log('inside savechanges in weekschedule')\n      var newSched = this.state.weekSchedule; // console.log(state)\n\n      var rowIndex = state.rowIndex; // console.log(rowIndex)\n      // console.log(newSched.rows)\n\n      switch (state.category) {\n        case 'type':\n          console.log('hello');\n          var time = state.time,\n              type = state.type;\n          newSched.rows[rowIndex].time = time;\n          newSched.rows[rowIndex].type = type;\n          API.updateWeek(newSched);\n          cb();\n          break;\n\n        case 'detail':\n          var dayIndex = state.dayIndex,\n              numGuests = state.numGuests,\n              guides = state.guides;\n          newSched.rows[rowIndex].days[dayIndex].numGuests = numGuests;\n          newSched.rows[rowIndex].days[dayIndex].guides = guides;\n          API.updateWeek(newSched);\n          cb();\n          break;\n      } // // const {name, value} = event.target\n      // let newWeekSched = this.state.weekSchedule;\n      // const row = newWeekSched.rows[rowIndex];\n      // switch (category) {\n      //     case 'type':\n      //         switch (name) {\n      //             case 'time':\n      //                 console.log('current time: ' + row.time)\n      //                 console.log('new time: ' + value)\n      //                 newWeekSched.rows[rowIndex].time = value\n      //                 break;\n      //             case 'type':\n      //                 console.log('current type: ' + row.type)\n      //                 console.log('new type: ' + value)\n      //                 newWeekSched.rows[rowIndex].type = value\n      //         }\n      //         break;\n      //     case 'detail':\n      //         if(dayIndex) {\n      //             console.log('dayindex exists!')\n      //             console.log('current numGuests: ' + row.days[dayIndex].numGuests)\n      //             console.log('new numGuests: ' + value)\n      //             newWeekSched.rows[rowIndex].days[dayIndex].numGuests = value\n      //         }\n      //         break;\n      // }\n      // console.log(this.state.row[])\n      // this.setState({ [id]: value })\n\n    } // handleArrayChange(id, name, value) { //TODO add ability to add row\n    //     // const {name, value} = event.target\n    //     // const index = parseInt(name)\n    //     // const newGuides = this.state.guides.map((guide, i) => {\n    //     //     return(i === index ? value : guide)\n    //     // });\n    //     this.setState({ [id]: value })\n    // }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // console.log(this.state.week.rows)\n      return React.createElement(Table, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.updateSchedule,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Click me\")), dayArray.map(function (day) {\n        return React.createElement(\"th\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, day);\n      })), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }), this.populateDates(this.state.weekSchedule.week, this.state.weekSchedule.year).map(function (date) {\n        return React.createElement(\"th\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, date);\n      }))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, this.state.weekSchedule.rows.map(function (row, index) {\n        return React.createElement(Row, {\n          key: row,\n          rowIndex: index,\n          row: row,\n          saveChanges: _this2.saveChanges,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        });\n      }), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return WeekSchedule;\n}(Component);\n\nexport default WeekSchedule;","map":{"version":3,"sources":["c:\\Users\\Zach\\bc\\00-Homework\\Scheduler\\client\\src\\components\\WeekSchedule\\weekSchedule.js"],"names":["React","Component","Row","Table","API","moment","require","dayArray","WeekSchedule","props","state","weekSchedule","week","saveChanges","bind","year","date","format","dateArray","i","push","add","cb","newSched","rowIndex","category","console","log","time","type","rows","updateWeek","dayIndex","numGuests","guides","days","updateSchedule","map","day","populateDates","row","index"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Row from '../Row';\nimport { Table } from 'react-bootstrap';\nimport API from '../../utils/API'\nconst moment = require('moment')\n\nconst dayArray = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n\nclass WeekSchedule extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { //TODO change this from state to database query\n            weekSchedule: this.props.week || {}\n        }\n        // this.updateSchedule = this.updateSchedule.bind(this);\n        this.saveChanges = this.saveChanges.bind(this);\n    }\n\n\n    populateDates(week, year) { //returns an array with each date of the given week (e.g. 1-Jul, 2-Jul, 3-Jul, etc.)\n        const date = moment(week + ' ' + year, \"w-YYYY\").format('D-MMM')\n        let dateArray = []\n        for (let i = 1; i < 8; i++) {\n            dateArray.push(moment(date).add(i, 'day').format('D-MMM'))\n        }\n        return dateArray\n    }\n\n    saveChanges(state, cb) {\n        // console.log('inside savechanges in weekschedule')\n        let newSched = this.state.weekSchedule;\n        // console.log(state)\n        const rowIndex = state.rowIndex;\n        // console.log(rowIndex)\n        // console.log(newSched.rows)\n        switch(state.category){\n            case 'type':\n                console.log('hello')\n                const {time, type} = state;\n                newSched.rows[rowIndex].time = time;\n                newSched.rows[rowIndex].type = type;\n                API.updateWeek(newSched);\n                cb();\n                break;\n\n            case 'detail':\n                const {dayIndex, numGuests, guides} = state;\n                newSched.rows[rowIndex].days[dayIndex].numGuests = numGuests;\n                newSched.rows[rowIndex].days[dayIndex].guides = guides;\n                API.updateWeek(newSched);\n                cb();\n                break;\n            }\n        // // const {name, value} = event.target\n        // let newWeekSched = this.state.weekSchedule;\n        // const row = newWeekSched.rows[rowIndex];\n        // switch (category) {\n        //     case 'type':\n        //         switch (name) {\n        //             case 'time':\n        //                 console.log('current time: ' + row.time)\n        //                 console.log('new time: ' + value)\n        //                 newWeekSched.rows[rowIndex].time = value\n        //                 break;\n        //             case 'type':\n        //                 console.log('current type: ' + row.type)\n        //                 console.log('new type: ' + value)\n        //                 newWeekSched.rows[rowIndex].type = value\n        //         }\n        //         break;\n        //     case 'detail':\n        //         if(dayIndex) {\n        //             console.log('dayindex exists!')\n        //             console.log('current numGuests: ' + row.days[dayIndex].numGuests)\n        //             console.log('new numGuests: ' + value)\n        //             newWeekSched.rows[rowIndex].days[dayIndex].numGuests = value\n        //         }\n        //         break;\n\n        // }\n        // console.log(this.state.row[])\n        // this.setState({ [id]: value })\n    }\n\n    // handleArrayChange(id, name, value) { //TODO add ability to add row\n    //     // const {name, value} = event.target\n    //     // const index = parseInt(name)\n    //     // const newGuides = this.state.guides.map((guide, i) => {\n    //     //     return(i === index ? value : guide)\n    //     // });\n    //     this.setState({ [id]: value })\n    // }\n\n    render() {\n        // console.log(this.state.week.rows)\n        return (\n            <Table striped bordered hover>\n\n                <thead>\n                    <tr>\n                        <th><button onClick={this.updateSchedule}>Click me</button></th>\n                        {dayArray.map(day => <th>{day}</th>)}\n                    </tr>\n                    <tr>\n                        <th></th>\n                        {this.populateDates(this.state.weekSchedule.week, this.state.weekSchedule.year).map(date => <th>{date}</th>)}\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.state.weekSchedule.rows.map((row, index) => {\n                        return (\n                            <Row\n                                key={row}\n                                rowIndex={index}\n                                row={row}\n                                saveChanges = {this.saveChanges}\n                            />\n                        )\n                    })}\n                    <tr>\n\n                    </tr>\n                </tbody>\n            </Table >\n        )\n    }\n\n}\n\nexport default WeekSchedule;\n"]},"metadata":{},"sourceType":"module"}