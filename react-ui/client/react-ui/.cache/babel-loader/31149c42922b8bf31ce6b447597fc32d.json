{"ast":null,"code":"import _classCallCheck from \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"c:\\\\Users\\\\Zach\\\\bc\\\\00-Homework\\\\Scheduler\\\\client\\\\src\\\\components\\\\WeekSchedule\\\\weekSchedule.js\";\nimport React, { Component } from \"react\";\nimport Row from '../Row';\nimport { Table } from 'react-bootstrap';\nimport API from '../../utils/API';\nimport '../table.css';\nimport { createBrotliCompress } from \"zlib\";\n\nvar moment = require('moment');\n\nvar dayArray = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\nvar WeekSchedule =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WeekSchedule, _Component);\n\n  function WeekSchedule(props) {\n    var _this;\n\n    _classCallCheck(this, WeekSchedule);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WeekSchedule).call(this, props));\n    _this.state = {\n      //TODO change this from state to database query\n      weekSchedule: _this.props.week || {} // this.updateSchedule = this.updateSchedule.bind(this);\n\n    };\n    _this.saveChanges = _this.saveChanges.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.deleteRow = _this.deleteRow.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addRow = _this.addRow.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(WeekSchedule, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {}\n  }, {\n    key: \"populateDates\",\n    value: function populateDates(week, year) {\n      //returns an array with each date of the given week (e.g. 1-Jul, 2-Jul, 3-Jul, etc.)\n      var date = moment(week + ' ' + year, \"w-YYYY\");\n      var dateArray = [];\n\n      for (var i = 1; i < 8; i++) {\n        dateArray.push(moment(date).add(i, 'day').format('D-MMM'));\n      }\n\n      return dateArray;\n    }\n  }, {\n    key: \"saveChanges\",\n    value: function saveChanges(state, cb) {\n      // console.log('event', event)\n      // console.log('inside savechanges in weekschedule')\n      var newSched = this.state.weekSchedule;\n      console.log('changes to save: ', state);\n      var rowIndex = state.rowIndex; // console.log(rowIndex)\n      // console.log(newSched.rows)\n\n      switch (state.category) {\n        case 'type':\n          var time = state.time,\n              type = state.type;\n          newSched.rows[rowIndex].time = time;\n          newSched.rows[rowIndex].type = type; // console.log('newSched type', newSched)\n\n          API.updateWeek(newSched, function (res) {\n            cb(); // console.log('saved data', res)\n          });\n          break;\n\n        case 'detail':\n          var dayIndex = state.dayIndex,\n              numGuests = state.numGuests,\n              guides = state.guides;\n          newSched.rows[rowIndex].days[dayIndex].numGuests = numGuests;\n          newSched.rows[rowIndex].days[dayIndex].guides = guides;\n          console.log('newSched detail', newSched);\n          API.updateWeek(newSched, function (res) {\n            cb(); // console.log('saved data', res)\n          });\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"deleteRow\",\n    value: function deleteRow(rowIndex) {\n      console.log('rowIndex', rowIndex);\n      console.log('this.state', this.state.weekSchedule.rows);\n      var newSched = this.state.weekSchedule;\n      var newRows = newSched.rows.map(function (row, index) {\n        if (index !== rowIndex) {\n          return row;\n        }\n      });\n      console.log(newRows);\n    }\n  }, {\n    key: \"addRow\",\n    value: function addRow(rowIndex) {\n      console.log('rowIndex', rowIndex);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // console.log(this.state.week.rows)\n      return React.createElement(Table, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, dayArray.map(function (day) {\n        return React.createElement(\"th\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, day);\n      })), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), this.populateDates(this.state.weekSchedule.week, this.state.weekSchedule.year).map(function (date) {\n        return React.createElement(\"th\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, date);\n      }))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, this.state.weekSchedule.rows.map(function (row, index) {\n        return React.createElement(Row, {\n          key: row,\n          rowindex: index,\n          row: row,\n          saveChanges: _this2.saveChanges,\n          deleterow: _this2.deleteRow,\n          addrow: _this2.addRow,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        });\n      }), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return WeekSchedule;\n}(Component);\n\nexport default WeekSchedule;","map":{"version":3,"sources":["c:\\Users\\Zach\\bc\\00-Homework\\Scheduler\\client\\src\\components\\WeekSchedule\\weekSchedule.js"],"names":["React","Component","Row","Table","API","createBrotliCompress","moment","require","dayArray","WeekSchedule","props","state","weekSchedule","week","saveChanges","bind","deleteRow","addRow","year","date","dateArray","i","push","add","format","cb","newSched","console","log","rowIndex","category","time","type","rows","updateWeek","res","dayIndex","numGuests","guides","days","newRows","map","row","index","day","populateDates"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Row from '../Row';\nimport { Table } from 'react-bootstrap';\nimport API from '../../utils/API'\nimport '../table.css';\nimport { createBrotliCompress } from \"zlib\";\nconst moment = require('moment')\n\nconst dayArray = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n\nclass WeekSchedule extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { //TODO change this from state to database query\n            weekSchedule: this.props.week || {}\n        }\n        // this.updateSchedule = this.updateSchedule.bind(this);\n        this.saveChanges = this.saveChanges.bind(this);\n        this.deleteRow = this.deleteRow.bind(this);\n        this.addRow = this.addRow.bind(this);\n    }\n\n    componentDidUpdate() {\n\n    }\n\n    populateDates(week, year) { //returns an array with each date of the given week (e.g. 1-Jul, 2-Jul, 3-Jul, etc.)\n        const date = moment(week + ' ' + year, \"w-YYYY\")\n        let dateArray = []\n        for (let i = 1; i < 8; i++) {\n            dateArray.push(moment(date).add(i, 'day').format('D-MMM'))\n        }\n        return dateArray\n    }\n\n    saveChanges(state, cb) {\n        // console.log('event', event)\n        // console.log('inside savechanges in weekschedule')\n        let newSched = this.state.weekSchedule;\n        console.log('changes to save: ', state)\n        const rowIndex = state.rowIndex;\n        // console.log(rowIndex)\n        // console.log(newSched.rows)\n        switch (state.category) {\n            case 'type':\n                const { time, type } = state;\n                newSched.rows[rowIndex].time = time;\n                newSched.rows[rowIndex].type = type;\n                // console.log('newSched type', newSched)\n                API.updateWeek(newSched, res => {\n                    cb()\n                    // console.log('saved data', res)\n                });\n                break;\n\n            case 'detail':\n                const { dayIndex, numGuests, guides } = state;\n                newSched.rows[rowIndex].days[dayIndex].numGuests = numGuests;\n                newSched.rows[rowIndex].days[dayIndex].guides = guides;\n                console.log('newSched detail', newSched)\n                API.updateWeek(newSched, res => {\n                    cb()\n                    // console.log('saved data', res)\n                });\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    deleteRow(rowIndex){\n        console.log('rowIndex', rowIndex)\n        console.log('this.state', this.state.weekSchedule.rows)\n        let newSched = this.state.weekSchedule\n        let newRows =  newSched.rows.map((row, index) => {\n            if(index !== rowIndex){\n                return row\n            }\n        })\n        console.log(newRows);\n    }\n\n    addRow(rowIndex){\n        console.log('rowIndex', rowIndex)\n    }\n\n    render() {\n        // console.log(this.state.week.rows)\n        return (\n            <Table striped bordered hover>\n\n                <thead>\n                    <tr>\n                        {dayArray.map(day => <th>{day}</th>)}\n                    </tr>\n                    <tr>\n                        <th></th>\n                        {this.populateDates(this.state.weekSchedule.week, this.state.weekSchedule.year).map(date => <th>{date}</th>)}\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.state.weekSchedule.rows.map((row, index) => {\n                        return (\n                            <Row\n                                key={row}\n                                rowindex={index}\n                                row={row}\n                                saveChanges={this.saveChanges}\n                                deleterow = {this.deleteRow}\n                                addrow = {this.addRow}\n                            />\n                        )\n                    })}\n                    <tr>\n\n                    </tr>\n                </tbody>\n            </Table >\n        )\n    }\n\n}\n\nexport default WeekSchedule;\n"]},"metadata":{},"sourceType":"module"}